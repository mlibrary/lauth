/* 
**  mod_lauth.c -- Apache sample lauth module
**  [Autogenerated via ``apxs -n lauth -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_lauth.c
**
**  Then activate it in Apache's httpd.conf file for instance
**  for the URL /lauth in as follows:
**
**    #   httpd.conf
**    LoadModule lauth_module modules/mod_lauth.so
**    <Location /lauth>
**    SetHandler lauth
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /lauth and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/lauth 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_lauth.c
*/ 

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "http_request.h"
#include "ap_config.h"
#include "ap_provider.h"

#include "mod_auth.h"

#include <lauth/authorizer.hpp>

#include <string>

using namespace mlibrary::lauth;

extern "C" {
    void lauth_register_hooks(apr_pool_t *p);

    /* Dispatch list for API hooks */
    module AP_MODULE_DECLARE_DATA lauth_module = {
        STANDARD20_MODULE_STUFF, 
        NULL,                  /* create per-dir    config structures */
        NULL,                  /* merge  per-dir    config structures */
        NULL,                  /* create per-server config structures */
        NULL,                  /* merge  per-server config structures */
        NULL,                  /* table of config file commands       */
        lauth_register_hooks  /* register hooks                      */
    };
};

/* The sample content handler */
int lauth_handler(request_rec *r)
{
    if (strcmp(r->handler, "lauth")) {
        return DECLINED;
    }
    r->content_type = "text/html";      

    Authorizer lauth;
    RequestInfo req {
        .foo = "there's something delicious cooking"
    };
    auto result = lauth.bar(req);

    if (!r->header_only) {
        ap_rprintf(r, "Authorizer, foo: %d, bar: %s", lauth.foo(), result.c_str());
    }
    return OK;
}


static authz_status lauth_check_authorization(request_rec *r,
                                                  const char *require_line,
                                                  const void *parsed_require_line)
{
    return AUTHZ_DENIED;
}

static const authz_provider authz_lauth_provider =
{
    &lauth_check_authorization,
    NULL
};

void lauth_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(lauth_handler, NULL, NULL, APR_HOOK_MIDDLE);

    ap_register_auth_provider(p, AUTHZ_PROVIDER_GROUP, "lauth",
                          AUTHZ_PROVIDER_VERSION,
                          &authz_lauth_provider, AP_AUTH_INTERNAL_PER_CONF);
}


